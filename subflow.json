{
	"id": "f690adf5bb953586",
	"type": "subflow",
	"name": "Folder to Scatter Chart",
	"info": "",
	"category": "dashboard",
	"in": [
		{
			"x": 20,
			"y": 60,
			"wires": [
				{
					"id": "577c5cbdda626823"
				}
			]
		}
	],
	"out": [
		{
			"x": 1210,
			"y": 260,
			"wires": [
				{
					"id": "2353a48548a0e8eb",
					"port": 0
				}
			]
		}
	],
	"env": [],
	"meta": {
		"module": "folder-to-scatter-chart",
		"author": "eamon@s1seven.com"
	},
	"color": "#3FADB5",
	"inputLabels": [
		"folder path"
	],
	"outputLabels": [
		"chart data"
	],
	"icon": "node-red-dashboard/ui_chart.png",
	"flow": [
		{
			"id": "888889af44f458cf",
			"type": "fs-ops-dir",
			"z": "f690adf5bb953586",
			"name": "Read directory",
			"path": "path",
			"pathType": "msg",
			"filter": "*.json",
			"filterType": "str",
			"dir": "files",
			"dirType": "msg",
			"x": 400,
			"y": 60,
			"wires": [
				[
					"e2cccc27ec023551"
				]
			]
		},
		{
			"id": "25fe168f9510996c",
			"type": "switch",
			"z": "f690adf5bb953586",
			"name": "Check msg.files contains a list of filenames",
			"property": "files",
			"propertyType": "msg",
			"rules": [
				{
					"t": "istype",
					"v": "array",
					"vt": "array"
				}
			],
			"checkall": "true",
			"repair": false,
			"outputs": 1,
			"x": 890,
			"y": 60,
			"wires": [
				[
					"f5f7e42472e49966"
				]
			]
		},
		{
			"id": "e2cccc27ec023551",
			"type": "change",
			"z": "f690adf5bb953586",
			"name": "",
			"rules": [
				{
					"t": "set",
					"p": "payload",
					"pt": "msg",
					"to": "files",
					"tot": "msg"
				}
			],
			"action": "",
			"property": "",
			"from": "",
			"to": "",
			"reg": false,
			"x": 600,
			"y": 60,
			"wires": [
				[
					"25fe168f9510996c",
					"0bf8c13ba150a2a5"
				]
			]
		},
		{
			"id": "f5f7e42472e49966",
			"type": "split",
			"z": "f690adf5bb953586",
			"name": "Split array into individual filenames",
			"splt": "\\n",
			"spltType": "str",
			"arraySplt": 1,
			"arraySpltType": "len",
			"stream": false,
			"addname": "filename",
			"x": 1240,
			"y": 60,
			"wires": [
				[
					"99111a44e1a9e052"
				]
			]
		},
		{
			"id": "99111a44e1a9e052",
			"type": "change",
			"z": "f690adf5bb953586",
			"name": "",
			"rules": [
				{
					"t": "set",
					"p": "filename",
					"pt": "msg",
					"to": "payload",
					"tot": "msg"
				}
			],
			"action": "",
			"property": "",
			"from": "",
			"to": "",
			"reg": false,
			"x": 210,
			"y": 160,
			"wires": [
				[
					"4351fb0e176d3755"
				]
			]
		},
		{
			"id": "4351fb0e176d3755",
			"type": "function",
			"z": "f690adf5bb953586",
			"name": "Construct filepath",
			"func": "msg.filename = msg.path + msg.filename;\nreturn msg;",
			"outputs": 1,
			"noerr": 0,
			"initialize": "",
			"finalize": "",
			"libs": [],
			"x": 430,
			"y": 160,
			"wires": [
				[
					"17939904dc357bed"
				]
			]
		},
		{
			"id": "17939904dc357bed",
			"type": "file in",
			"z": "f690adf5bb953586",
			"name": "",
			"filename": "",
			"format": "utf8",
			"chunk": false,
			"sendError": false,
			"encoding": "none",
			"allProps": false,
			"x": 620,
			"y": 160,
			"wires": [
				[
					"bc16451609ad7e6b"
				]
			]
		},
		{
			"id": "bc16451609ad7e6b",
			"type": "json",
			"z": "f690adf5bb953586",
			"name": "Covert to JSON",
			"property": "payload",
			"action": "",
			"pretty": false,
			"x": 820,
			"y": 160,
			"wires": [
				[
					"e93e0f79460e8085",
					"0bf8c13ba150a2a5"
				]
			]
		},
		{
			"id": "2353a48548a0e8eb",
			"type": "ui_template",
			"z": "f690adf5bb953586",
			"group": "48449c35798e4e1d",
			"name": "Display chart",
			"order": 0,
			"width": "15",
			"height": "15",
			"format": "",
			"storeOutMessages": true,
			"fwdInMessages": true,
			"resendOnRefresh": true,
			"templateScope": "local",
			"className": "",
			"x": 1030,
			"y": 260,
			"wires": [
				[]
			]
		},
		{
			"id": "a576a4e46f45f5d5",
			"type": "template",
			"z": "f690adf5bb953586",
			"name": "Create template for chart",
			"field": "template",
			"fieldType": "msg",
			"format": "handlebars",
			"syntax": "mustache",
			"template": "<div>\n  <canvas id=\"myChartScatter\" height=\"1\" width=\"1\"></canvas>\n</div>\n<script>\n\nnew Chart(document.getElementById('myChartScatter'), {\n    type: 'scatter',\n    data: {\n        datasets: [{\n            // label: 'Scatter Dataset',\n            label: \"{{{payload.legend}}}\",\n            data: {{{payload.data}}},\n            showLine: false,\n            backgroundColor: 'rgb(255, 99, 132)',\n        }],\n    },\n    options: {\n        title: {\n            display: true,\n            text: '{{{payload.title}}} Content',\n        }, \n        \n        plugins: {\n            autocolors: false,\n            annotation: {\n                annotations: {\n                    minLine: {\n                        type: 'line',\n                        borderColor: 'red',\n                        borderWidth: 1,\n                        label: {\n                            enabled: true,\n                            backgroundColor: 'red',\n                            borderColor: 'red',\n                            borderRadius: 10,\n                            borderWidth: 1,\n                            // content: (ctx) => 'Lower bound: ' + minValue(ctx).toFixed(3),\n                            content: 'min',\n                            rotation: 'auto'\n                        },\n                        scaleID: 'y',\n                        value: {{{min}}}\n                    },\n                    maxLine: {\n                        type: 'line',\n                        borderColor: 'red',\n                        borderWidth: 1,\n                        label: {\n                            enabled: true,\n                            backgroundColor: 'red',\n                            borderColor: 'red',\n                            borderRadius: 10,\n                            borderWidth: 1,\n                            content: 'max',\n                            rotation: 'auto'\n                        },\n                        scaleID: 'y',\n                        value: {{{max}}}\n                    },\n                }\n            }\n        },\n\n        scales: {\n            y: {\n                beginAtZero: true,\n                suggestedMax: {{{max}}} * 1.5,\n            },\n            x: {\n                grid: {\n                    display: false,\n                },\n            }\n        }\n    }\n});\n</script>\n ",
			"output": "str",
			"x": 810,
			"y": 260,
			"wires": [
				[
					"2353a48548a0e8eb",
					"0bf8c13ba150a2a5"
				]
			]
		},
		{
			"id": "51faac732d8b5afb",
			"type": "ui_template",
			"z": "f690adf5bb953586",
			"group": "bc22481bfe8df892",
			"name": "Load chart code",
			"order": 1,
			"width": 0,
			"height": 0,
			"format": "<script src=\"/resources/node-red-chartjs/chart.min.js\"></script>\n<script src=\"/resources/node-red-chartjs/chartjs-plugin-annotation.min.js\"></script>\n",
			"storeOutMessages": true,
			"fwdInMessages": true,
			"resendOnRefresh": true,
			"templateScope": "global",
			"className": "",
			"x": 580,
			"y": 260,
			"wires": [
				[
					"a576a4e46f45f5d5"
				]
			]
		},
		{
			"id": "d7679c42451c8690",
			"type": "function",
			"z": "f690adf5bb953586",
			"name": "Extract data for chart",
			"func": "const min = global.get('min');\nconst max = global.get('max');\nconst element = global.get('element');\nmsg.min = min;\nmsg.max = max;\nmsg.propertyName = element;\n\nif (!msg.propertyName) {\n    node.warn('Please select an element using the ui');\n} else if (typeof msg.min !== 'number') {\n    node.warn('Please set the min and max values using the ui');\n} else {\n    const chemicalCompositionObjects = msg.payload; //ChemicalComposition object\n    const currentProperty = msg.propertyName; // e.g. 'Si'\n\n    const scatterData = {\n        title: '',\n        legend: `${currentProperty} Content`,\n        data: [],\n    }\n\n    chemicalCompositionObjects.forEach((dataPoint, index) => {\n        // find the object that contains the correct property\n        let foundObject;\n    \n        for (let prop in dataPoint) {\n            if (dataPoint[prop].Symbol === currentProperty) {\n                foundObject = dataPoint[prop];\n            }   \n        }\n\n        if (foundObject) {\n            if (!scatterData.title) {\n                scatterData.title = foundObject.Symbol;\n            }\n            scatterData.data.push({ x: index + 1, y: foundObject.Actual });\n            \n            if (foundObject.Actual < msg.min) {\n                node.warn(`${foundObject.Symbol} value is less than the specified minimum in sample number ${index}`)\n            } else if (foundObject.Actual > msg.max) {\n                node.warn(`${foundObject.Symbol} value is greater than than the specified maximum in sample number ${index}`)\n            }\n        } else {\n        node.warn('Element not found, ensure element exists in the Certificate under ChemicalAnalysis');\n        }   \n    })\n\n    scatterData.data = JSON.stringify(scatterData.data);\n    msg.payload = scatterData;\n    \n    return msg;\n\n}\n\n",
			"outputs": 1,
			"noerr": 0,
			"initialize": "",
			"finalize": "",
			"libs": [],
			"x": 360,
			"y": 260,
			"wires": [
				[
					"51faac732d8b5afb"
				]
			]
		},
		{
			"id": "de4b59cf1d0eb3a9",
			"type": "join",
			"z": "f690adf5bb953586",
			"name": "",
			"mode": "auto",
			"build": "object",
			"property": "payload",
			"propertyType": "msg",
			"key": "topic",
			"joiner": "\\n",
			"joinerType": "str",
			"accumulate": true,
			"timeout": "",
			"count": "",
			"reduceRight": false,
			"reduceExp": "",
			"reduceInit": "",
			"reduceInitType": "",
			"reduceFixup": "",
			"x": 1310,
			"y": 160,
			"wires": [
				[
					"d7679c42451c8690"
				]
			]
		},
		{
			"id": "e93e0f79460e8085",
			"type": "change",
			"z": "f690adf5bb953586",
			"name": "Extract ChemicalComposition",
			"rules": [
				{
					"t": "set",
					"p": "certificate",
					"pt": "msg",
					"to": "payload",
					"tot": "msg",
					"dc": true
				},
				{
					"t": "set",
					"p": "payload",
					"pt": "msg",
					"to": "payload.Certificate.Inspection.ChemicalComposition",
					"tot": "msg",
					"dc": true
				}
			],
			"action": "",
			"property": "",
			"from": "",
			"to": "",
			"reg": false,
			"x": 1090,
			"y": 160,
			"wires": [
				[
					"de4b59cf1d0eb3a9",
					"0bf8c13ba150a2a5"
				]
			]
		},
		{
			"id": "577c5cbdda626823",
			"type": "function",
			"z": "f690adf5bb953586",
			"name": "Check for filepath",
			"func": "if (!msg.path) {\n    node.warn(\"Please inject a filepath\");\n} else if (!msg.path.endsWith('/')) {\n    msg.path += '/';\n    return msg;\n} else {\n    return msg;\n}\n",
			"outputs": 1,
			"noerr": 0,
			"initialize": "",
			"finalize": "",
			"libs": [],
			"x": 170,
			"y": 60,
			"wires": [
				[
					"888889af44f458cf"
				]
			]
		},
		{
			"id": "0bf8c13ba150a2a5",
			"type": "debug",
			"z": "f690adf5bb953586",
			"name": "",
			"active": true,
			"tosidebar": true,
			"console": false,
			"tostatus": false,
			"complete": "true",
			"targetType": "full",
			"statusVal": "",
			"statusType": "auto",
			"x": 1410,
			"y": 120,
			"wires": []
		},
		{
			"id": "48449c35798e4e1d",
			"type": "ui_group",
			"name": "Folder to Scatter chart",
			"tab": "38a292d30ab83f07",
			"order": 1,
			"disp": true,
			"width": "15",
			"collapse": false,
			"className": ""
		},
		{
			"id": "bc22481bfe8df892",
			"type": "ui_group",
			"name": "Default tab",
			"tab": "6bdc7447c7d15906",
			"order": 1,
			"disp": true,
			"width": "20",
			"collapse": false,
			"className": ""
		},
		{
			"id": "38a292d30ab83f07",
			"type": "ui_tab",
			"name": "Folder to Scatter chart",
			"icon": "dashboard",
			"disabled": false,
			"hidden": false
		},
		{
			"id": "6bdc7447c7d15906",
			"type": "ui_tab",
			"name": "HTML",
			"icon": "dashboard",
			"disabled": false,
			"hidden": false
		}
	]
}

