{
	"id": "02240bde7ae215a7",
	"type": "ui_tab",
	"name": "Chart Input tab",
	"icon": "dashboard",
	"disabled": false,
	"hidden": false,
	"flow": [
		{
			"id": "7e2cf8a50282c560",
			"type": "subflow",
			"name": "Subflow 4",
			"info": "",
			"in": [
				{
					"x": 420,
					"y": 80,
					"wires": [
						{
							"id": "a39b01d3cac0e850"
						}
					]
				}
			],
			"out": [
				{
					"x": 960,
					"y": 180,
					"wires": [
						{
							"id": "7769a8a13f38bec7",
							"port": 0
						}
					]
				}
			]
		},
		{
			"id": "0e13bfcccf7772a5",
			"type": "switch",
			"z": "7e2cf8a50282c560",
			"name": "Check msg.files contains a list of filenames",
			"property": "files",
			"propertyType": "msg",
			"rules": [
				{
					"t": "istype",
					"v": "array",
					"vt": "array"
				}
			],
			"checkall": "true",
			"repair": false,
			"outputs": 1,
			"x": 870,
			"y": 80,
			"wires": [["e5f8fc742510a806"]]
		},
		{
			"id": "a39b01d3cac0e850",
			"type": "change",
			"z": "7e2cf8a50282c560",
			"name": "",
			"rules": [
				{
					"t": "set",
					"p": "payload",
					"pt": "msg",
					"to": "files",
					"tot": "msg"
				}
			],
			"action": "",
			"property": "",
			"from": "",
			"to": "",
			"reg": false,
			"x": 580,
			"y": 80,
			"wires": [["0e13bfcccf7772a5"]]
		},
		{
			"id": "e5f8fc742510a806",
			"type": "split",
			"z": "7e2cf8a50282c560",
			"name": "Split array into individual filenames",
			"splt": "\\n",
			"spltType": "str",
			"arraySplt": 1,
			"arraySpltType": "len",
			"stream": false,
			"addname": "filename",
			"x": 1220,
			"y": 80,
			"wires": [["e6c823f4ed6a749e"]]
		},
		{
			"id": "e6c823f4ed6a749e",
			"type": "change",
			"z": "7e2cf8a50282c560",
			"name": "",
			"rules": [
				{
					"t": "set",
					"p": "filename",
					"pt": "msg",
					"to": "payload",
					"tot": "msg"
				}
			],
			"action": "",
			"property": "",
			"from": "",
			"to": "",
			"reg": false,
			"x": 190,
			"y": 180,
			"wires": [["9230333959c8a831"]]
		},
		{
			"id": "9230333959c8a831",
			"type": "function",
			"z": "7e2cf8a50282c560",
			"name": "Construct filepath",
			"func": "msg.filename = msg.path + msg.filename;\nreturn msg;",
			"outputs": 1,
			"noerr": 0,
			"initialize": "",
			"finalize": "",
			"libs": [],
			"x": 410,
			"y": 180,
			"wires": [["6fdc8158bca0e0ca"]]
		},
		{
			"id": "6fdc8158bca0e0ca",
			"type": "file in",
			"z": "7e2cf8a50282c560",
			"name": "",
			"filename": "",
			"format": "utf8",
			"chunk": false,
			"sendError": false,
			"encoding": "none",
			"allProps": false,
			"x": 600,
			"y": 180,
			"wires": [["7769a8a13f38bec7"]]
		},
		{
			"id": "7769a8a13f38bec7",
			"type": "json",
			"z": "7e2cf8a50282c560",
			"name": "Covert to JSON",
			"property": "payload",
			"action": "",
			"pretty": false,
			"x": 800,
			"y": 180,
			"wires": [[]]
		},
		{
			"id": "8b063ac3da1fbde6",
			"type": "subflow",
			"name": "Folder to Scatter Chart",
			"info": "",
			"category": "dashboard",
			"in": [
				{
					"x": 220,
					"y": 140,
					"wires": [
						{
							"id": "ed2e70bd873f5907"
						}
					]
				}
			],
			"out": [],
			"env": [],
			"meta": {
				"module": "Folder to Scatter Chart",
				"author": "eamon@s1seven.com",
				"desc": "Takes the path to a folder containing certificates as input via the UI, outputs a Scatter Chart to the UI with the selected element, min and max"
			},
			"color": "#3FADB5",
			"icon": "node-red-dashboard/ui_chart.png"
		},
		{
			"id": "8749ac750cc96b3c",
			"type": "debug",
			"z": "8b063ac3da1fbde6",
			"name": "",
			"active": true,
			"tosidebar": true,
			"console": false,
			"tostatus": false,
			"complete": "payload",
			"targetType": "msg",
			"statusVal": "",
			"statusType": "auto",
			"x": 1230,
			"y": 220,
			"wires": []
		},
		{
			"id": "e09a3f7998a09a06",
			"type": "comment",
			"z": "8b063ac3da1fbde6",
			"name": "Sends a separate message for each filename in the msg.files array",
			"info": "",
			"x": 780,
			"y": 80,
			"wires": []
		},
		{
			"id": "8ed97b5b45517227",
			"type": "change",
			"z": "8b063ac3da1fbde6",
			"name": "Extract ChemicalComposition",
			"rules": [
				{
					"t": "set",
					"p": "certificate",
					"pt": "msg",
					"to": "payload",
					"tot": "msg",
					"dc": true
				},
				{
					"t": "set",
					"p": "payload",
					"pt": "msg",
					"to": "payload.Certificate.Inspection.ChemicalComposition",
					"tot": "msg",
					"dc": true
				}
			],
			"action": "",
			"property": "",
			"from": "",
			"to": "",
			"reg": false,
			"x": 1110,
			"y": 140,
			"wires": [["837803f237164522"]]
		},
		{
			"id": "837803f237164522",
			"type": "join",
			"z": "8b063ac3da1fbde6",
			"name": "",
			"mode": "auto",
			"build": "object",
			"property": "payload",
			"propertyType": "msg",
			"key": "topic",
			"joiner": "\\n",
			"joinerType": "str",
			"accumulate": true,
			"timeout": "",
			"count": "",
			"reduceRight": false,
			"reduceExp": "",
			"reduceInit": "",
			"reduceInitType": "",
			"reduceFixup": "",
			"x": 190,
			"y": 220,
			"wires": [["f9a5f5d21079468f"]]
		},
		{
			"id": "f9a5f5d21079468f",
			"type": "function",
			"z": "8b063ac3da1fbde6",
			"name": "Extract data for chart",
			"func": "const min = global.get('min');\nconst max = global.get('max');\nconst element = global.get('element');\nmsg.min = min;\nmsg.max = max;\nmsg.propertyName = element;\n\nif (!msg.propertyName) {\n    node.warn('Please select an element using the ui');\n} else if (typeof msg.min !== 'number') {\n    node.warn('Please set the min and max values using the ui');\n} else {\n    const chemicalCompositionObjects = msg.payload; //ChemicalComposition object\n    const currentProperty = msg.propertyName; // e.g. 'Si'\n\n    const scatterData = {\n        title: '',\n        legend: `${currentProperty} Content`,\n        data: [],\n    }\n\n    chemicalCompositionObjects.forEach((dataPoint, index) => {\n        // find the object that contains the correct property\n        let foundObject;\n    \n        for (let prop in dataPoint) {\n            if (dataPoint[prop].Symbol === currentProperty) {\n                foundObject = dataPoint[prop];\n            }   \n        }\n\n        if (foundObject) {\n            if (!scatterData.title) {\n                scatterData.title = foundObject.Symbol;\n            }\n            scatterData.data.push({ x: index + 1, y: foundObject.Actual });\n            \n            if (foundObject.Actual < msg.min) {\n                node.warn(`${foundObject.Symbol} value is less than the specified minimum in sample number ${index}`)\n            } else if (foundObject.Actual > msg.max) {\n                node.warn(`${foundObject.Symbol} value is greater than than the specified maximum in sample number ${index}`)\n            }\n        } else {\n        node.warn('Element not found, ensure element exists in the Certificate under ChemicalAnalysis');\n        }   \n    })\n\n    scatterData.data = JSON.stringify(scatterData.data);\n    msg.payload = scatterData;\n    \n    return msg;\n\n}\n\n",
			"outputs": 1,
			"noerr": 0,
			"initialize": "",
			"finalize": "",
			"libs": [],
			"x": 380,
			"y": 220,
			"wires": [["39d13a7ed6863cbc"]]
		},
		{
			"id": "7716cf02beb50ffa",
			"type": "catch",
			"z": "8b063ac3da1fbde6",
			"name": "",
			"scope": null,
			"uncaught": false,
			"x": 200,
			"y": 640,
			"wires": [["d838385f476fc535"]]
		},
		{
			"id": "d838385f476fc535",
			"type": "debug",
			"z": "8b063ac3da1fbde6",
			"name": "",
			"active": true,
			"tosidebar": true,
			"console": false,
			"tostatus": false,
			"complete": "error",
			"targetType": "msg",
			"statusVal": "",
			"statusType": "auto",
			"x": 360,
			"y": 640,
			"wires": []
		},
		{
			"id": "b806c69bd103dcea",
			"type": "ui_template",
			"z": "8b063ac3da1fbde6",
			"group": "48449c35798e4e1d",
			"name": "Display chart",
			"order": 0,
			"width": "15",
			"height": "15",
			"format": "",
			"storeOutMessages": true,
			"fwdInMessages": true,
			"resendOnRefresh": true,
			"templateScope": "local",
			"className": "",
			"x": 1050,
			"y": 220,
			"wires": [["8749ac750cc96b3c"]]
		},
		{
			"id": "aa372e092898612f",
			"type": "template",
			"z": "8b063ac3da1fbde6",
			"name": "Create template for chart",
			"field": "template",
			"fieldType": "msg",
			"format": "handlebars",
			"syntax": "mustache",
			"template": "<div>\n  <canvas id=\"myChartScatter\" height=\"1\" width=\"1\"></canvas>\n</div>\n<script>\n\nnew Chart(document.getElementById('myChartScatter'), {\n    type: 'scatter',\n    data: {\n        datasets: [{\n            // label: 'Scatter Dataset',\n            label: \"{{{payload.legend}}}\",\n            data: {{{payload.data}}},\n            showLine: false,\n            backgroundColor: 'rgb(255, 99, 132)',\n        }],\n    },\n    options: {\n        title: {\n            display: true,\n            text: '{{{payload.title}}} Content',\n        }, \n        \n        plugins: {\n            autocolors: false,\n            annotation: {\n                annotations: {\n                    minLine: {\n                        type: 'line',\n                        borderColor: 'red',\n                        borderWidth: 1,\n                        label: {\n                            enabled: true,\n                            backgroundColor: 'red',\n                            borderColor: 'red',\n                            borderRadius: 10,\n                            borderWidth: 1,\n                            content: 'min',\n                            rotation: 'auto'\n                        },\n                        scaleID: 'y',\n                        value: {{{min}}}\n                    },\n                    maxLine: {\n                        type: 'line',\n                        borderColor: 'red',\n                        borderWidth: 1,\n                        label: {\n                            enabled: true,\n                            backgroundColor: 'red',\n                            borderColor: 'red',\n                            borderRadius: 10,\n                            borderWidth: 1,\n                            content: 'max',\n                            rotation: 'auto'\n                        },\n                        scaleID: 'y',\n                        value: {{{max}}}\n                    },\n                }\n            }\n        },\n\n        scales: {\n            y: {\n                beginAtZero: true,\n                suggestedMax: {{{max}}} * 1.5,\n            },\n            x: {\n                grid: {\n                    display: false,\n                },\n            }\n        }\n    }\n});\n</script>\n ",
			"output": "str",
			"x": 830,
			"y": 220,
			"wires": [["b806c69bd103dcea"]]
		},
		{
			"id": "39d13a7ed6863cbc",
			"type": "ui_template",
			"z": "8b063ac3da1fbde6",
			"group": "bc22481bfe8df892",
			"name": "Load chart code",
			"order": 1,
			"width": 0,
			"height": 0,
			"format": "<script src=\"/resources/node-red-chartjs/chart.min.js\"></script>\n<script src=\"/resources/node-red-chartjs/chartjs-plugin-annotation.min.js\"></script>\n",
			"storeOutMessages": true,
			"fwdInMessages": true,
			"resendOnRefresh": true,
			"templateScope": "global",
			"className": "",
			"x": 600,
			"y": 220,
			"wires": [["aa372e092898612f"]]
		},
		{
			"id": "bb8621b267fdb957",
			"type": "subflow:7e2cf8a50282c560",
			"z": "8b063ac3da1fbde6",
			"name": "Extract data from each file",
			"x": 820,
			"y": 140,
			"wires": [["8ed97b5b45517227"]]
		},
		{
			"id": "de058a46f4275c48",
			"type": "fs-ops-dir",
			"z": "8b063ac3da1fbde6",
			"name": "Read directory",
			"path": "path",
			"pathType": "msg",
			"filter": "*.json",
			"filterType": "str",
			"dir": "files",
			"dirType": "msg",
			"x": 580,
			"y": 140,
			"wires": [["bb8621b267fdb957"]]
		},
		{
			"id": "07663326387ef835",
			"type": "ui_form",
			"z": "8b063ac3da1fbde6",
			"name": "",
			"label": "Set min and max values to be shown on charts",
			"group": "20ef8eabbd79885a",
			"order": 2,
			"width": 0,
			"height": 0,
			"options": [
				{
					"label": "Max",
					"value": "Max",
					"type": "number",
					"required": true,
					"rows": null
				},
				{
					"label": "Min",
					"value": "Min",
					"type": "number",
					"required": true,
					"rows": null
				}
			],
			"formValue": {
				"Max": "",
				"Min": ""
			},
			"payload": "",
			"submit": "submit",
			"cancel": "cancel",
			"topic": "topic",
			"topicType": "msg",
			"splitLayout": "",
			"className": "",
			"x": 520,
			"y": 420,
			"wires": [["152183c6b14cc17f"]]
		},
		{
			"id": "9e9b3636dd5b6f10",
			"type": "ui_dropdown",
			"z": "8b063ac3da1fbde6",
			"name": "Select element to be shown on charts",
			"label": "Select element",
			"tooltip": "",
			"place": "Select option",
			"group": "20ef8eabbd79885a",
			"order": 0,
			"width": 0,
			"height": 0,
			"passthru": true,
			"multiple": false,
			"options": [
				{
					"label": "C",
					"value": "C",
					"type": "str"
				},
				{
					"label": "Si",
					"value": "Si",
					"type": "str"
				},
				{
					"label": "Mn",
					"value": "Mn",
					"type": "str"
				},
				{
					"label": "P",
					"value": "P",
					"type": "str"
				},
				{
					"label": "S",
					"value": "S",
					"type": "str"
				},
				{
					"label": "Al",
					"value": "Al",
					"type": "str"
				},
				{
					"label": "Cr",
					"value": "Cr",
					"type": "str"
				},
				{
					"label": "Ni",
					"value": "Ni",
					"type": "str"
				},
				{
					"label": "Mo",
					"value": "Mo",
					"type": "str"
				},
				{
					"label": "Cu",
					"value": "Cu",
					"type": "str"
				},
				{
					"label": "V",
					"value": "V",
					"type": "str"
				},
				{
					"label": "Ti",
					"value": "Ti",
					"type": "str"
				},
				{
					"label": "N",
					"value": "N",
					"type": "str"
				},
				{
					"label": "B",
					"value": "B",
					"type": "str"
				},
				{
					"label": "CEV",
					"value": "CEV",
					"type": "str"
				}
			],
			"payload": "",
			"topic": "topic",
			"topicType": "msg",
			"className": "",
			"x": 490,
			"y": 340,
			"wires": [["c432447bd3569b34"]]
		},
		{
			"id": "694d276ac6fda127",
			"type": "debug",
			"z": "8b063ac3da1fbde6",
			"name": "",
			"active": true,
			"tosidebar": true,
			"console": false,
			"tostatus": false,
			"complete": "false",
			"statusVal": "",
			"statusType": "auto",
			"x": 1130,
			"y": 420,
			"wires": []
		},
		{
			"id": "c432447bd3569b34",
			"type": "function",
			"z": "8b063ac3da1fbde6",
			"name": "Set element globally",
			"func": "if (msg.payload) {\n    global.set('element', msg.payload);\n}\n\nreturn msg;",
			"outputs": 1,
			"noerr": 0,
			"initialize": "",
			"finalize": "",
			"libs": [],
			"x": 780,
			"y": 340,
			"wires": [["694d276ac6fda127"]]
		},
		{
			"id": "152183c6b14cc17f",
			"type": "function",
			"z": "8b063ac3da1fbde6",
			"name": "Set min and max globally",
			"func": "if (msg.payload) {\n    global.set('max', msg.payload.Max);\n    global.set('min', msg.payload.Min);\n}\n\nreturn msg;",
			"outputs": 1,
			"noerr": 0,
			"initialize": "",
			"finalize": "",
			"libs": [],
			"x": 850,
			"y": 420,
			"wires": [["694d276ac6fda127", "9bf2540c9c2edbd8"]]
		},
		{
			"id": "9bf2540c9c2edbd8",
			"type": "function",
			"z": "8b063ac3da1fbde6",
			"name": "Display values ",
			"func": "msg.payload.Min = global.get('min');\nmsg.payload.Max = global.get('max');\n\n\nreturn msg;",
			"outputs": 1,
			"noerr": 0,
			"initialize": "",
			"finalize": "",
			"libs": [],
			"x": 220,
			"y": 420,
			"wires": [["07663326387ef835"]]
		},
		{
			"id": "48ee94ccb8b754bd",
			"type": "ui_form",
			"z": "8b063ac3da1fbde6",
			"name": "",
			"label": "Set the path to the folder containing the certificates",
			"group": "20ef8eabbd79885a",
			"order": 2,
			"width": 0,
			"height": 0,
			"options": [
				{
					"label": "Filepath",
					"value": "path",
					"type": "text",
					"required": true,
					"rows": null
				}
			],
			"formValue": {
				"path": ""
			},
			"payload": "",
			"submit": "submit",
			"cancel": "cancel",
			"topic": "path",
			"topicType": "msg",
			"splitLayout": "",
			"className": "",
			"x": 530,
			"y": 500,
			"wires": [["674aced4659b2f86"]]
		},
		{
			"id": "674aced4659b2f86",
			"type": "function",
			"z": "8b063ac3da1fbde6",
			"name": "Set path globally",
			"func": "if (msg.payload.path) {\n    global.set('path', msg.payload.path);\n}\n\nreturn msg;",
			"outputs": 1,
			"noerr": 0,
			"initialize": "",
			"finalize": "",
			"libs": [],
			"x": 850,
			"y": 500,
			"wires": [["694d276ac6fda127"]]
		},
		{
			"id": "ed2e70bd873f5907",
			"type": "function",
			"z": "8b063ac3da1fbde6",
			"name": "get path from UI",
			"func": "msg.path = global.get('path');\n\nif (msg.path) {\n    if (msg.path.endsWith('/')) {\n        return msg;\n    } else {\n        msg.path += \"/\";\n        return msg;\n    }\n} else {\n    node.warn('Set the path to the folder via the UI');\n}\n\n",
			"outputs": 1,
			"noerr": 0,
			"initialize": "",
			"finalize": "",
			"libs": [],
			"x": 380,
			"y": 140,
			"wires": [["de058a46f4275c48"]]
		},
		{
			"id": "48449c35798e4e1d",
			"type": "ui_group",
			"name": "Folder to Scatter chart",
			"tab": "38a292d30ab83f07",
			"order": 1,
			"disp": true,
			"width": "15",
			"collapse": false,
			"className": ""
		},
		{
			"id": "bc22481bfe8df892",
			"type": "ui_group",
			"name": "Default tab",
			"tab": "6bdc7447c7d15906",
			"order": 1,
			"disp": true,
			"width": "20",
			"collapse": false,
			"className": ""
		},
		{
			"id": "20ef8eabbd79885a",
			"type": "ui_group",
			"name": "Set min and max values",
			"tab": "02240bde7ae215a7",
			"order": 1,
			"disp": true,
			"width": "10",
			"collapse": false,
			"className": ""
		},
		{
			"id": "38a292d30ab83f07",
			"type": "ui_tab",
			"name": "Folder to Scatter chart",
			"icon": "dashboard",
			"disabled": false,
			"hidden": false
		},
		{
			"id": "6bdc7447c7d15906",
			"type": "ui_tab",
			"name": "HTML",
			"icon": "dashboard",
			"disabled": false,
			"hidden": false
		}
	]
}
